// Package gen contains all the components for code generation.
package gen

const handlerListTmpl = `
// Code generated by 'gen/handlerlistgen'  DO NOT EDIT.
// IT SHOULD NOT BE EDITED BY HAND AS ANY CHANGES MAY BE OVERWRITTEN
// File was generated at {{.GenTime}}
package {{.PackageName}}

import (
	log "github.com/golang/glog"

	"github.com/ethereum/go-ethereum/common"

	"github.com/joincivil/civil-events-crawler/pkg/model"
	"github.com/joincivil/civil-events-crawler/pkg/generated/filterer"
	"github.com/joincivil/civil-events-crawler/pkg/generated/watcher"
)

func ContractFilterers(nameToAddrs map[string][]common.Address) []model.ContractFilterers {
	filters := []model.ContractFilterers{}

	var addrs []common.Address
	var addr common.Address
	var ok bool

{{if .Contracts -}}
{{- range .Contracts }}

	addrs, ok = nameToAddrs["{{.SimpleName}}"]
	if ok {
		for _, addr = range addrs {
			filter := filterer.New{{.Name}}Filterers(addr)
			filters = append(filters, filter)
			log.Info("Added {{.Name}} filterer")
		}
	}

{{- end}}
{{- end}}

	return filters
}

func ContractWatchers(nameToAddrs map[string][]common.Address) []model.ContractWatchers {
	watchers := []model.ContractWatchers{}

	var addrs []common.Address
	var addr common.Address
	var ok bool

{{if .Contracts -}}
{{- range .Contracts }}

	addrs, ok = nameToAddrs["{{.SimpleName}}"]
	if ok {
		for _, addr = range addrs {
			watch := watcher.New{{.Name}}Watchers(addr)
			watchers = append(watchers, watch)
			log.Info("Added {{.Name}} watcher")
		}
	}

{{- end}}
{{- end}}

	return watchers
}
`
